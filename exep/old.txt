class CustomerFactory:
    def __init__(self):
        self.db_conn = DbConnection.get_instance()
        self.cursor = self.db_conn.connection.cursor()

    def create_customer(self, name, city, credit_points, is_active):

        cursor = self.db_conn.cursor()
        query = "SELECT MAX(ID) FROM Customer"
        cursor.execute(query)
        result = cursor.fetchone()
        next_id = 1 if result[0] is None else result[0] + 1
        query = "INSERT INTO Customer (ID, Name, City, CreditPoints, IsActive) VALUES (%s, %s, %s, %s, %s)"
        credit_points = float(credit_points)
        cursor.execute(query, (next_id, name, city, credit_points, is_active))
        self.db_conn.connection.commit()
        cursor.close()
        return True

    def read_customer(self, customer_id):
        self.cursor.execute(
            "SELECT * FROM Customer WHERE ID = %s",
            (customer_id,)
        )
        return self.cursor.fetchone()

    def update_customer(self, customer_id, name, city, credit_points, is_active):
        self.cursor.execute(
            "UPDATE Customer SET Name = %s, City = %s, CreditPoints = %s, IsActive = %s WHERE ID = %s",
            (name, city, credit_points, is_active, customer_id)
        )
        self.db_conn.connection.commit()

    def delete_customer(self, id):

        cursor = self.db_conn.cursor()
        try:
            query = "DELETE FROM Customer WHERE ID=%s"
            cursor.execute(query, (id,))
            self.db_conn.connection.commit()
            rowcount = cursor.rowcount
        except mysql.connector.errors.IntegrityError as e:
            if e.errno == 1451:
                raise Exception(
                    "Cannot delete customer, there are orders associated with it.")
            else:
                raise e
        cursor.close()
        return rowcount > 0














class ProductFactory:
    def __init__(self):
        self.db_conn = DbConnection.get_instance()

    
    

    def add_product(self, name, type, price):

        cursor = self.db_conn.cursor()
        query = "SELECT MAX(ID) FROM Product"
        cursor.execute(query)
        result = cursor.fetchone()
        next_id = 1 if result[0] is None else result[0] + 1

        query = "INSERT INTO Product(ID, Name, Type, Price) VALUES(%s, %s, %s, %s)"
        cursor.execute(query, (next_id, name, type, price))
        self.db_conn.connection.commit()
        cursor.close()
        return True

    def get_product(self, product_id: int):

        cursor = self.db_conn.cursor()
        query = "SELECT * FROM Product WHERE ID = %s"
        cursor.execute(query, (product_id,))
        product = cursor.fetchone()
        cursor.close()
        return product

    def update_product(self, id, name=None, type=None, price=None):

        cursor = self.db_conn.cursor()
        query = "UPDATE Product SET Name=%s, Type=%s, Price=%s WHERE ID=%s"
        cursor.execute(query, (name, type, price, id))
        self.db_conn.connection.commit()
        cursor.close()

    def delete_product(self, id):

        cursor = self.db_conn.cursor()

        query = "SELECT * FROM Product WHERE ID=%s"
        cursor.execute(query, (id,))
        result = cursor.fetchone()
        if not result:
            cursor.close()
            return False

        query = "DELETE FROM OrderItem WHERE ProductID=%s"
        cursor.execute(query, (id,))
        self.db_conn.connection.commit()

        query = "DELETE FROM Product WHERE ID=%s"
        cursor.execute(query, (id,))
        self.db_conn.connection.commit()
        cursor.close()
        return True